agent:
  label: jenkins-python37
  container: python37
pipelines:
  pullRequest:
    build:
      steps:
      - sh: python3 -m pip install flake8 && flake8
        name: flake8
      - sh: python3 -m pip install pytest hypothesis && pytest
        name: testing
      - sh: python3 -m pip install -r ./requirements.txt && python3 app.py
        name: training
  release:
    setup:
      steps:
      - groovy: git 'https://REPLACE_ME_GIT_PROVIDER/REPLACE_ME_ORG/REPLACE_ME_APP_NAME.git'
        when: "prow"
      - sh: git checkout master
        comment: ensure we're not on a detached head
        when: "!prow"
      - sh: git config --global credential.helper store
        when: "!prow"
      - sh: jx step git credentials
        when: "!prow"
    setVersion:
      steps:
      - sh: echo \$(jx-release-version) > VERSION
        comment: so we can retrieve the version in later steps
      # TODO set the version in source?
      - sh: jx step tag --version \$(cat VERSION)
    build:
      steps:
      - sh: python3 -m pip install flake8 && flake8
        name: flake8
      # - sh: python -m pip install pytest hypothesis && pytest
      - sh: python3 -m pip install -r ./requirements.txt && python3 app.py
        name: training
      - sh: >
          export TARGET_SERVICE=`echo $APP_NAME | sed -Ee s/-training$/-service/` &&      # Target App with same prefix but -service suffix
          export GIT_PROVIDER=`jx repo -qub | grep -oP '(^https?:\/\/[a-zA-Z\d-\.]+)'` && # https://github.com or other domain
          export TARGET_SERVICE_REPO=`echo $GIT_PROVIDER/$REPO_OWNER/$TARGET_SERVICE` &&  # Target repo for storing model
          git clone $TARGET_SERVICE_REPO &&
          cd $TARGET_SERVICE &&
          git checkout syncmodel || git checkout -b syncmodel &&
          git lfs install &&
          git lfs track '*.onnx' &&
          cp ../*.onnx . &&
          git add *.onnx &&
          git commit -m 'feat: New model trained' &&
          git push --set-upstream origin syncmodel &&
          jx create pullrequest -b -t 'New model trained'
        name: export-model
  post:
    steps:
    - groovy: always
      when: "!prow"
      steps:
      - groovy: "cleanWs()"
